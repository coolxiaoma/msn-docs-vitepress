import{_ as t,c as a,o as r,ag as o}from"./chunks/framework.B4sg4S7y.js";const d=JSON.parse('{"title":"性能提升60%：前端性能优化终极指南","description":"","frontmatter":{},"headers":[],"relativePath":"pages/excellent-article/性能提升.md","filePath":"pages/excellent-article/性能提升.md"}'),n={name:"pages/excellent-article/性能提升.md"};function s(i,e,l,c,p,_){return r(),a("div",null,[...e[0]||(e[0]=[o('<h1 id="性能提升60-前端性能优化终极指南" tabindex="-1"><a href="https://mp.weixin.qq.com/s/GUGnV-rX_HNtTeoL3P0nig" target="_blank" rel="noreferrer">性能提升60%：前端性能优化终极指南</a> <a class="header-anchor" href="#性能提升60-前端性能优化终极指南" aria-label="Permalink to &quot;[性能提升60%：前端性能优化终极指南](https://mp.weixin.qq.com/s/GUGnV-rX_HNtTeoL3P0nig)&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于本文<br> 来源：微信公众号「稀土掘金技术社区」<br> 地址：<a href="https://mp.weixin.qq.com/s/GUGnV-rX_HNtTeoL3P0nig" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/GUGnV-rX_HNtTeoL3P0nig</a></p></div><p><span style="background-color:#f5eefe;color:#595959;">性能优化</span>一直是前端绕不开的话题。页面加载慢、交互卡顿，不仅影响用户体验，还可能直接流失用户。本文将从「<strong>加载、运行、构建、网络</strong>」四个环节，系统梳理前端能想到的各种性能优化手段，帮助我们尽可能的提升前端页面性能。</p><h2 id="加载性能优化-更快呈现首屏" tabindex="-1">加载性能优化：更快呈现首屏 <a class="header-anchor" href="#加载性能优化-更快呈现首屏" aria-label="Permalink to &quot;加载性能优化：更快呈现首屏&quot;">​</a></h2><p>加载阶段的目标是「尽快把可见内容展示给用户」，减少白屏和首屏等待时间。</p>',5)])])}const h=t(n,[["render",s]]);export{d as __pageData,h as default};
